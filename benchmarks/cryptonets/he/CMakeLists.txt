cmake_minimum_required(VERSION 3.13)

project(HECryptonets VERSION 1.0 LANGUAGES CXX)

SET(SEAL_HEADERS "" CACHE STRING "SEAl headers path")
SET(SEAL_OBJECT "" CACHE STRING "SEAl object path")

add_library(gen_he_cryptonets_65537_noopt STATIC gen/gen_he_cryptonets_65537_noopt.cpp)
target_compile_features(gen_he_cryptonets_65537_noopt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_65537_noopt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_65537_noopt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_65537_noopt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_65537_opt STATIC gen/gen_he_cryptonets_65537_opt.cpp)
target_compile_features(gen_he_cryptonets_65537_opt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_65537_opt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_65537_opt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_65537_opt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_114689_noopt STATIC gen/gen_he_cryptonets_114689_noopt.cpp)
target_compile_features(gen_he_cryptonets_114689_noopt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_114689_noopt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_114689_noopt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_114689_noopt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_114689_opt STATIC gen/gen_he_cryptonets_114689_opt.cpp)
target_compile_features(gen_he_cryptonets_114689_opt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_114689_opt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_114689_opt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_114689_opt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_147457_noopt STATIC gen/gen_he_cryptonets_147457_noopt.cpp)
target_compile_features(gen_he_cryptonets_147457_noopt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_147457_noopt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_147457_noopt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_147457_noopt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_147457_opt STATIC gen/gen_he_cryptonets_147457_opt.cpp)
target_compile_features(gen_he_cryptonets_147457_opt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_147457_opt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_147457_opt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_147457_opt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_163841_noopt STATIC gen/gen_he_cryptonets_163841_noopt.cpp)
target_compile_features(gen_he_cryptonets_163841_noopt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_163841_noopt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_163841_noopt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_163841_noopt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_163841_opt STATIC gen/gen_he_cryptonets_163841_opt.cpp)
target_compile_features(gen_he_cryptonets_163841_opt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_163841_opt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_163841_opt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_163841_opt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_557057_noopt STATIC gen/gen_he_cryptonets_557057_noopt.cpp)
target_compile_features(gen_he_cryptonets_557057_noopt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_557057_noopt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_557057_noopt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_557057_noopt PUBLIC ${SEAL_OBJECT})

add_library(gen_he_cryptonets_557057_opt STATIC gen/gen_he_cryptonets_557057_opt.cpp)
target_compile_features(gen_he_cryptonets_557057_opt PUBLIC cxx_std_17)
set_target_properties(gen_he_cryptonets_557057_opt PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(gen_he_cryptonets_557057_opt PUBLIC ${SEAL_HEADERS})
target_link_libraries(gen_he_cryptonets_557057_opt PUBLIC ${SEAL_OBJECT})

add_library(utils STATIC utils.cpp)
target_compile_features(utils PUBLIC cxx_std_17)
set_target_properties(utils PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(utils PUBLIC ${SEAL_HEADERS})
target_link_libraries(utils PUBLIC ${SEAL_OBJECT})

add_library(utils_checks STATIC utils_checks.cpp)
target_compile_features(utils_checks PUBLIC cxx_std_17)
set_target_properties(utils_checks PROPERTIES CXX_EXTENSIONS OFF)
target_include_directories(utils_checks PUBLIC ${SEAL_HEADERS})
target_link_libraries(utils_checks PUBLIC ${SEAL_OBJECT})

add_executable(main main.cpp)
target_link_libraries(main PRIVATE gen_he_cryptonets_65537_noopt)
target_link_libraries(main PRIVATE gen_he_cryptonets_65537_opt)
target_link_libraries(main PRIVATE gen_he_cryptonets_114689_noopt)
target_link_libraries(main PRIVATE gen_he_cryptonets_114689_opt)
target_link_libraries(main PRIVATE gen_he_cryptonets_147457_noopt)
target_link_libraries(main PRIVATE gen_he_cryptonets_147457_opt)
target_link_libraries(main PRIVATE gen_he_cryptonets_163841_noopt)
target_link_libraries(main PRIVATE gen_he_cryptonets_163841_opt)
target_link_libraries(main PRIVATE gen_he_cryptonets_557057_noopt)
target_link_libraries(main PRIVATE gen_he_cryptonets_557057_opt)
target_link_libraries(main PRIVATE utils)

# add_executable(main_checks main_checks.cpp)
# target_link_libraries(main_checks PRIVATE gen_he_cryptonets_65537_noopt)
# target_link_libraries(main_checks PRIVATE gen_he_cryptonets_65537_opt)
# target_link_libraries(main_checks PRIVATE utils_checks)
